---
############################
#  SHARED

env-cf: &env-cf
  CF_API: https://api.fr.cloud.gov
  CF_USERNAME: ((((deploy-env))-cf-username))
  CF_PASSWORD: ((((deploy-env))-cf-password))
  CF_ORG: gsa-18f-federalist
  CF_SPACE: ((deploy-env))
  CF_STACK: cflinuxfs4

test: &test
  - in_parallel:
    - task: test-mock
      privileged: true
      file: src/ci/partials/test-mocks.yml
      image: dind
    - task: test-integration
      privileged: true
      params:
        DEDICATED_AWS_ACCESS_KEY_ID: ((dedicated-aws-access-key-id))
        DEDICATED_AWS_SECRET_ACCESS_KEY: ((dedicated-aws-secret-access-key))
      file: src/ci/partials/test-integrations.yml
      image: dind

############################
#  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        resource: src-((deploy-env))
        trigger: true
      - get: pipeline-tasks
      - get: general-task
      - task: init
        image: general-task
        file: pipeline-tasks/tasks/init.yml
        params:
          PIPELINE_YML: src/ci/pipeline.yml
      - set_pipeline: proxy
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))
          git-branch: ((git-branch))

  - name: test-pr-((git-branch))
    plan:
    - get: src
      resource: pr-((git-branch))
      trigger: true
      version: every

    - put: src
      resource: pr-((git-branch))
      params:
        path: src
        status: pending
        base_context: concourse
        context: test-pr-proxy-((deploy-env))
    - get: nginx
      params:
        format: oci
    - get: node
    - get: node-oci
      resource: node
      params:
        format: oci
    - get: dind
    - do: *test

    on_failure:
      put: src
      resource: pr-((git-branch))
      params:
        path: src
        status: failure
        base_context: concourse
        context: test-pr-proxy-((deploy-env))

    on_success:
      put: src
      resource: pr-((git-branch))
      params:
        path: src
        status: success
        base_context: concourse
        context: test-pr-proxy-((deploy-env))

  - name: test-and-deploy-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        trigger: true
        params: {depth: 1}
      - get: general-task
      - get: nginx
        params:
          format: oci
      - get: node
      - get: node-oci
        resource: node
        params:
          format: oci
      - get: pipeline-tasks
      - get: dind
      - do: *test
      - task: build-redirects
        image: node
        file: src/ci/partials/build-redirects.yml
        params:
          SITE_REDIRECTS: ((pages-proxy-((deploy-env))-site-redirects))
      - task: deploy
        image: general-task
        file: src/ci/partials/deploy.yml
        params:
          <<: *env-cf
          CF_APP_NAME: pages-proxy-((deploy-env))
          CF_MANIFEST: .cloudgov/manifest.yml
          CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
        on_failure:
          try:
            task: cancel-api-deployment
            image: general-task
            file: pipeline-tasks/tasks/cancel-deployment.yml
            params:
              <<: *env-cf
              CF_APP_NAME: pages-proxy-((deploy-env))
    on_failure:
      in_parallel:
        - put: slack
          params:
            text: |
              :x: FAILED: pages proxy deployment on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))
    on_success:
      in_parallel:
        - put: slack
          params:
            text: |
              :white_check_mark: SUCCESS: Successfully deployed pages proxy on ((deploy-env))
              <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
            channel: ((slack-channel))
            username: ((slack-username))
            icon_url: ((slack-icon-url))

  - name: nightly-tasks-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))
        passed: [set-pipeline]
        params: {depth: 1}
      - get: nightly
        trigger: true
      - get: general-task
      - get: pipeline-tasks
      - task: restage
        image: general-task
        file: pipeline-tasks/tasksrestage.yml
        params:
          <<: *env-cf
          CF_APP_NAME: pages-proxy-((deploy-env))

############################
#  RESOURCES

resources:

  - name: src-((deploy-env))
    type: git
    icon: github
    source:
      uri: ((git-base-url))/((proxy-repository-path))
      branch: ((git-branch))
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))

  - name: pr-((git-branch))
    type: pull-request
    check_every: 1m
    source:
      repository: ((proxy-repository-path))
      access_token: ((gh-access-token))
      base_branch: ((git-branch))
      disable_forks: true
      ignore_drafts: false

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: pipeline-tasks
  - name: nginx
  - name: slack
  - name: node
  - name: general-task

############################
#  RESOURCE TYPES

resource_types:
  - name: git
  - name: slack-notification
  - name: pull-request
  - name: time
  - name: registry-image
